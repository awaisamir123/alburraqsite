{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red15\green112\blue1;\red19\green120\blue72;\red144\green1\blue18;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c50196\c0;\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
13/3/2019\
import\cf4  java.io.*;\cb1 \
\cf2 \cb3 import\cf4  java.math.*;\cb1 \
\cf2 \cb3 import\cf4  java.text.*;\cb1 \
\cf2 \cb3 import\cf4  java.util.*;\cb1 \
\cf2 \cb3 import\cf4  java.util.regex.*;\cb1 \
\
\cf2 \cb3 public\cf4  \cf2 class\cf4  Solution \{\cb1 \
\
\cb3     \cf5 /*\cf4 \cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3      * Complete the simpleArraySum function below.\cf4 \cb1 \
\cf5 \cb3      */\cf4 \cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf2 static\cf4  \cf2 int\cf4  simpleArraySum(\cf2 int\cf4 [] ar) \{\cb1 \
\cb3               \cf2 int\cf4  sum = \cf6 0\cf4 ;\cb1 \
\cb3           \cf2 for\cf4 (\cf2 int\cf4  i = \cf6 0\cf4 ; i < ar.length; i++)\cb1 \
\cb3         \{\cb1 \
\cb3             sum = sum + ar[i];\cb1 \
\cb3         \}\cb1 \
\cb3          \cf2 return\cf4  sum;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 private\cf4  \cf2 static\cf4  \cf2 final\cf4  Scanner scanner = \cf2 new\cf4  Scanner(System.in);\cb1 \
\
\cb3     \cf2 public\cf4  \cf2 static\cf4  \cf2 void\cf4  main(String[] args) \cf2 throws\cf4  IOException \{\cb1 \
\cb3         BufferedWriter bufferedWriter = \cf2 new\cf4  BufferedWriter(\cf2 new\cf4  FileWriter(System.getenv(\cf7 "OUTPUT_PATH"\cf4 )));\cb1 \
\
\cb3         \cf2 int\cf4  arCount = Integer.parseInt(scanner.nextLine().trim());\cb1 \
\
\cb3         \cf2 int\cf4 [] ar = \cf2 new\cf4  \cf2 int\cf4 [arCount];\cb1 \
\
\cb3         String[] arItems = scanner.nextLine().split(\cf7 " "\cf4 );\cb1 \
\
\cb3         \cf2 for\cf4  (\cf2 int\cf4  arItr = \cf6 0\cf4 ; arItr < arCount; arItr++) \{\cb1 \
\cb3             \cf2 int\cf4  arItem = Integer.parseInt(arItems[arItr].trim());\cb1 \
\cb3             ar[arItr] = arItem;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf2 int\cf4  result = simpleArraySum(ar);\cb1 \
\
\cb3         bufferedWriter.write(String.valueOf(result));\cb1 \
\cb3         bufferedWriter.newLine();\cb1 \
\
\cb3         bufferedWriter.close();\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
}